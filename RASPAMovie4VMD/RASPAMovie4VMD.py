#!/home/haoyuan/anaconda3/bin/python

'''
About:
This script makes the Movie_*component*.pdb file (trajectory) generated in RASPA GCMC simulations visualizable in VMD
Because VMD cannot handle trajectory with varying number of atoms, this script creates additional adsorbates that overlap with others
After executing this script, you can first load your MOF (Framework_0_final.pdb) in VMD, then load the pdb file generated by this script to view them together

Caution:
The pdb file generated by this script should ONLY be used for visualization, not for any physical analyses (such as RDF) as it will give wrong results
Also, please make sure that there's AT LEAST ONE adsorbate in each frame, otherwise this cannot work
Also, this script ONLY works for single-component simulations

Usage:
./RASPAMovie4VMD.py input_pdb_file output_pdb_file atom_orders_in_adsorbate

Example:
./RASPAMovie4VMD.py Movie_MgMOF74_1.1.4_298.000000_1000.000000_component_TIP3P_0.pdb Movie_MgMOF74_1.1.4_298.000000_1000.000000_component_TIP3P_0_ForVMD.pdb O_H_H

Author:
Haoyuan Chen
haoyuan.chen@utrgv.edu
April 2022
'''

import sys

inpdb = sys.argv[1]
outpdb = sys.argv[2]
adsatoms = sys.argv[3].split('_')
adslen = len(adsatoms)

f = open(inpdb, 'r')
indata = f.readlines()
f.close()

nads = []
lastads = []
for i,l in enumerate(indata):
    if 'ENDMDL' in l:
        nads.append(int(int(indata[i-1].strip().split()[1])/adslen))
        lastads_tmp = []
        for j in range(adslen):
            lastads_tmp.append(indata[i-1-j])
        lastads_tmp.reverse()
        lastads.append(lastads_tmp)
maxnads = max(nads)
nadstoadd = [maxnads-x for x in nads]

frameidx = 0
f = open(outpdb, 'w')
for i,l in enumerate(indata):
    if 'ENDMDL' in l:
        for j in range(nadstoadd[frameidx]):
            for k in range(adslen):
                line_tmp = lastads[frameidx][k]
                oldatomidx = int(line_tmp.strip().split()[1])
                newatomidx = oldatomidx+adslen*(j+1)
                oldatomidxstr = str(oldatomidx)
                newatomidxstr = str(newatomidx)
                if len(newatomidxstr) > len(oldatomidxstr):
                    oldatomidxstr = ' '+oldatomidxstr
                new_line = line_tmp.replace(oldatomidxstr,newatomidxstr,1)
                f.write(new_line)
        f.write('ENDMDL\n')
        frameidx += 1
    else:
        f.write(l)
f.close()

